<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[vue 隨手筆記 - IIS 架設 vue 站台]]></title>
    <url>%2F2019%2F02%2F14%2Fvue-%E9%9A%A8%E6%89%8B%E7%AD%86%E8%A8%98-IIS-%E6%9E%B6%E8%A8%AD-vue-%E7%AB%99%E5%8F%B0%2F</url>
    <content type="text"><![CDATA[建置網頁輸入以下指令，建置網頁1npm run build 專案會產生 dist 資料夾我們將會利用 dist 資料夾來掛載 vue 的網站內容 架設 vue 站台於 IIS 設定 vue 站台注意的是，實體路徑需指定到剛剛佈署產生的 dist 資料夾 設定完後，即可測試 vue 站台是否架設成功 (･ω･)b 在 IIS 中配置 vue-router當網站有一定規模時，將會使用到 vue-router 來控制網頁路由而在 IIS 中，如果要使用 vue-router 的話，需先準備以下步驟 安裝 IIS UrlRewrite 配置 web.config 安裝 IIS UrlRewrite於 IIS UrlRewrite 下載網頁 下載 IIS UrlRewrite 安裝檔 配置 web.config建置 web.config 檔案，其內容如下1234567891011121314151617&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;configuration&gt; &lt;system.webServer&gt; &lt;rewrite&gt; &lt;rules&gt; &lt;rule name=&quot;Handle History Mode and custom 404/500&quot; stopProcessing=&quot;true&quot;&gt; &lt;match url=&quot;(.*)&quot; /&gt; &lt;conditions logicalGrouping=&quot;MatchAll&quot;&gt; &lt;add input=&quot;&#123;REQUEST_FILENAME&#125;&quot; matchType=&quot;IsFile&quot; negate=&quot;true&quot; /&gt; &lt;add input=&quot;&#123;REQUEST_FILENAME&#125;&quot; matchType=&quot;IsDirectory&quot; negate=&quot;true&quot; /&gt; &lt;/conditions&gt; &lt;action type=&quot;Rewrite&quot; url=&quot;/&quot; /&gt; &lt;/rule&gt; &lt;/rules&gt; &lt;/rewrite&gt; &lt;/system.webServer&gt;&lt;/configuration&gt; 這邊要注意的是因為 web.config 是為了讓 IIS 能夠配置 vue-router所以檔案需產生到 dist 資料夾中 (IIS 實體路徑是指到 dist 資料夾)但問題來了 (ʘᗩʘ’)因為每次建置網頁，dist 資料夾就會重新產生這樣的話，要一直重新新增 web.config 到 dist 資料夾中，不是很麻煩嗎?! (´д｀)因此，我們把 web.config 新增到 public 資料夾中 這樣一來，在每次建置的時候，就會自動將 web.config 產生至 dist 資料夾中了 (ﾉﾟ▽ﾟ)ﾉ 設定完後，即可測試 vue 站台是否能使用 vue-router (･ω･)b 參考vue-router 官方文擋]]></content>
      <categories>
        <category>學習日誌</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[asp.net core 隨手筆記 - 使用 IIS 架設 .net core API 站台]]></title>
    <url>%2F2019%2F02%2F12%2Fasp-net-core-%E9%9A%A8%E6%89%8B%E7%AD%86%E8%A8%98-%E4%BD%BF%E7%94%A8-IIS-%E6%9E%B6%E8%A8%AD-net-core-API-%E7%AB%99%E5%8F%B0%2F</url>
    <content type="text"><![CDATA[安裝 .NET Core 裝載套件組合於官網下載 .net Core 裝載套件組合 安裝套件 架設 .net core API 站台於 IIS 設定 API 站台這邊要注意幾個要點 需使用 發行 發佈檔案 實體路徑須設定至 publish 位置 於 hosts config 中加入本地 domain 127.0.0.1 www.appnetcore.test(host config 可於 C:\Windows\System32\drivers\etc 中找到) 以上都設定完後，即可測試 api 是否成功 (*ゝ∀･)v]]></content>
      <categories>
        <category>學習日誌</category>
      </categories>
      <tags>
        <tag>asp.net core</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python 隨手筆記 - 把 Django 丟到雲端去 (╯°▽°)╯]]></title>
    <url>%2F2018%2F12%2F04%2FPython-%E9%9A%A8%E6%89%8B%E7%AD%86%E8%A8%98-%E6%8A%8A-Django-%E4%B8%9F%E5%88%B0%E9%9B%B2%E7%AB%AF%E5%8E%BB-%E2%95%AF%C2%B0%E2%96%BD%C2%B0-%E2%95%AF%2F</url>
    <content type="text"><![CDATA[找個雲端好夥伴 - Google Cloud Platform (GCP)把 Django 部屬到雲端去有很多方式塔克這邊選擇用 GCP 中的 App Engine 來部屬 Django在開始部屬 Django 步驟之前有幾點需事先準備好 建立 GCP 帳號 下載 GCP 的專用套件 - Cloud SDK 設定 GAE 建立 GCP 帳號估狗上已經有很多教學範例這邊就不贅述了再請大家先餵狗一下唷 (･ω･) 額外小補充真找不到教學的朋友，可以參考這位大大的教學唷GCP_如何用Google Cloud Platform創建Server_帳號申請、Server建立 下載 GCP 的專用套件進入 Cloud SDK 下載頁面選擇系統版本下載並安裝安裝的部分也是毫無懸念地，一路給它下一步、下一步安裝到底 安裝好後，系統會自動開啟 Google Cloud SDK Shell(若沒有自動開啟，可以自行開啟 Google Cloud SDK Shell) 如果之前有像塔克一樣有先設定過的話會像畫面中顯示兩個選項 採用預設 config 建立新的 config 如果之前沒有設定過的話再請輸入以下指令，初始化 gcloud 設定1gcloud init 這邊塔克都是延續上一次設定帳號選擇 專案ID選擇 是否選擇區域 選擇亞洲區域 (這邊請選擇適合自己的區域) 設定好囉，就可以開始使用 Google Cloud SDK Shell 來上傳 Django 到 GAE 了 ! 設定 GAE回到 GCP 的網頁點擊 主選單，開啟下拉選單，選擇 App Engine，設定部屬環境 接著開啟語言選擇 我們這邊選擇 Python 語言 選擇一個適合的區域 完成設定後，GCP 會詢問要不要進入教學課程，有興趣的朋友可以看一下唷 ! GOGO ! 部屬 Django 到雲端去 !!在開始部屬到雲端前請大家先準備好自己的 Django 專案如果還沒準備好或不知道怎麼建立 Django 專案的可以參考塔克之前寫的 Python 隨手筆記 - 用 Django 作個網頁吧 ! 文章做練習 加入 app.yaml建立好基本專案後，也確定本地端伺服器 (http://127.0.0.1:8000/) 可以正常運行後在建立的專案底下，新增 app.yaml 檔案並輸入以下代碼12345678runtime: python37handlers:- url: /static static_dir: static/- url: /.* script: auto app.yaml 的設定可以參考 app.yaml Reference 加入 main.py在建立的專案底下，新增 main.py 檔案並輸入以下代碼12from mysite.wsgi import applicationapp = application GAE 預設會依照根目錄下 main.py 檔案中的 app 變數，作為 Django 網站程式的介面 修改 setting.py打開 yourprojectname/setting.py (塔克範例是 Webapi/setting.py)先進入到修改 ALLOWED_HOSTS 設定1ALLOWED_HOSTS = [&apos;*&apos;] 新增 STATIC_ROOT 設定，以便建立靜態檔案1STATIC_ROOT = &apos;static&apos; ... 以 Google Cloud SDK Shell 執行，進入虛擬環境打開 Google Cloud SDK Shell依專案設定進入虛擬環境 (以塔克的範例是 ~/venv/Scripts/activate)並將路徑指定到專案下 (以塔克的範例是 ~/Django/Webapi) 設定資料庫若想看看在專案中有哪些資料有新增或異動過的話可以在 Google Cloud SDK Shell 中，輸入以下代碼1python manage.py makemigrations 接著輸入以下代碼，以初始化或更新設定資料庫1python manage.py migrate 編制靜態檔案繼續在 Google Cloud SDK Shell 中輸入以下代碼編制靜態檔案1python manage.py collectstatic 這個指令會根據 settings.py 中的 STATIC_ROOT 的值來編製同時 app.yaml 也指定 /static 對應的靜態檔案目錄，讓 GAE 來服務靜態檔案 測試本地伺服器繼續在 Google Cloud SDK Shell 中，輸入以下代碼測試網站是否正常1python manage.py runserver 輸入網址 http://127.0.0.1:8000/ ，成功後將會看到 Django 的歡迎頁面 建立 requirements.txt繼續在 Google Cloud SDK Shell 中，輸入以下代碼建立 requirements.txt1pip freeze &gt; requirements.txt requirements.txt 將會告訴 GAE 我們需要用到那些應用程式如果沒有這個檔案的話，網頁會發生 502 錯誤唷 ! 額外小補充如果有朋友像塔克一樣習慣用 VSCode 下指令的話在這個步驟強烈建議使用 Google Cloud SDK Shell 來建立 requirements.txt或者是自己手動建立 txt 檔，並輸入相關代碼因為用 VSCode 輸入指令的話，會造成 GAE 無法辨識 requirements.txt導致網站無法 deploy 往雲端丟丟丟 (ﾉ≧∇≦)ﾉ繼續在 Google Cloud SDK Shell 中，輸入以下代碼1gcloud app deploy 這時候系統會顯示要上傳得相關設定是否正確 檢視後，若沒問題，就可以正式上傳成功上傳後，可以直接從 Google Cloud SDK Shell 中，輸入以下代碼1gcloud app browse 或是直接開啟網頁 http://yourprojectid.appspot.com沒問題的話，就可以看到 Django 跟你 say hello 囉 ! 參考GCP_如何用Google Cloud Platform創建Server_帳號申請、Server建立部署 Django 2 至 Google App Engine 第二代標準環境教學app.yaml Reference]]></content>
      <categories>
        <category>學習日誌</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 隨手筆記 - 請 Google 讓 Blog 發光發熱吧 !]]></title>
    <url>%2F2018%2F11%2F29%2FHexo-%E9%9A%A8%E6%89%8B%E7%AD%86%E8%A8%98-%E8%AB%8B-Google-%E8%AE%93-Blog-%E7%99%BC%E5%85%89%E7%99%BC%E7%86%B1%E5%90%A7%2F</url>
    <content type="text"><![CDATA[讓 Google 找到 Blog （๑✧∀✧๑）為了讓 Google 可以更加靈活地搜尋到自己的 Blog我們可以提供 Sitemap 檔案給 Google 進行讀取分析這樣有助於別人可以透過 Google 搜尋到自己的 Blog(以下操作方式均在 VS Code 開發環境中執行) 安裝 hexo sitemap 套件首先輸入以下代碼安裝 hexo-generator-sitemap 套件1npm install hexo-generator-sitemap --save 成功後，可以在 package.json 檔案中，看到剛剛新增的 hexo-generator-sitemap 套件 加入 Sitemap 路徑打開主程序中的 _config.yml，並輸入以下代碼123#Sitemapsitemap: path: sitemap.xml 創建 Sitemap 檔案接著啟動本地伺服器1hexo s -p 於網址中最後輸入 /sitemap.xml以塔克為例：http://localhost:4000/sitemap.xml就會看到 Sitemap 檔案內容 向 Google 申請 Blog Search首先打開 Google Search Console (在此之前請先申辦一個 Google 帳號並登入唷 !)接著把 Blog 的主頁網址輸入以塔克為例：https://happyhand.github.io/ 提交後會看到 Google 請我們驗證網頁 額外小補充是輸入主頁網址，不是剛剛的 sitemap.xml 網址唷 !!!不然等等驗證會一直找不到網頁 !!!不要像塔克一樣笨笨的，卡到快懷疑人生了 ╥﹏╥ 向 Google 驗證 Blog總共有5種驗證方式塔克選擇以 HTML 標記 為驗證方式而這個驗證方式說簡單很簡單，說麻煩也挺麻煩的 (當時塔克又差點懷疑人生了 Or2)簡單是說，只要把 HTML 中繼標記 (如下圖紅框) 添加到網站首頁的 &lt; head &gt; 至 &lt; body &gt; 區間中即可驗證 麻煩的是，因為 Hexo 的主題框架有很多種，偏偏每一種的添加方式又不太一樣這邊塔克也是愛莫能助，只能提供塔克使用的主題 - Melody 給大家做參考 在 Blog 中添加 Google HTML 標記驗證 (以主題 - Melody 為例)打開 ~/themes/Melody/layout/includes/layout.pug找到 doctype html 設定在 head 以及 body 中添加 HTML 中繼標記1meta(name=&quot;google-site-verification&quot; content=&quot;85ut1Jqu7TICdlVpdg-R5Fu5dKwOj5tKHDS2-drMK7k&quot;) 接著打開 ~/themes/Melody/layout/includes/slide/layout.pug以相同的方式添加 HTML 中繼標記這邊塔克就不贅述了接著 delpoy Blog，讓 Google 可以找到我們所添加的 HTML 中繼標記再回到 Google 驗證的頁面提交驗證成功後如下圖顯示： 提交 Sitemap 網頁前往資源設定頁面後打開 主選單，選擇 Sitemap，進入提交畫面輸入 Sitemap 網址 (就是 https://yourblogurl/sitemap.xml ，通常只要輸入 sitemap.xml 就好)按下提交 成功後，就等著 Google 幫我們去做網頁搜尋分析囉 (✪▽✪)y 參考Sitemap 說明Hexo Sitemap Github]]></content>
      <categories>
        <category>學習日誌</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python 隨手筆記 - 用 Django 作個網頁吧 !]]></title>
    <url>%2F2018%2F11%2F28%2FPython-%E9%9A%A8%E6%89%8B%E7%AD%86%E8%A8%98-%E7%94%A8-Django-%E4%BD%9C%E5%80%8B%E7%B6%B2%E9%A0%81%E5%90%A7%2F</url>
    <content type="text"><![CDATA[工欲善其事，必先利其器 !在開始建立個人網頁前我們先來找個合適的 IDE or 文本編輯器來編譯我們的專案(專案將會延續 Python 隨手筆記 - 安裝Django 的設定作說明) 來試試 VS Code在工具方面，塔克是使用 VS Code 來做為 Python 的文本編輯器有興趣的朋友可以參考一下這邊會再重新複習上一個章節 Python 隨手筆記 - 安裝Django 所進行的步驟已經熟悉的朋友可以直接跳過，直接往下一個步驟 讓伺服器跑起來 ! 進行 安裝 VS Code首先先到 VS Code 官網 安裝 VS Code 接著以 VS Code 開啟事先建立好的 Django 資料夾 在執行 Python 相關動作前，我們先來安裝 Python 套件 創建虛擬環境在 VS Code 環境中打開終端機 (快捷鍵是 Ctrl+`)一樣輸入創建虛擬環境的代碼1python -m venv yourvirtualenvironmentname 塔克這邊的例子是1python -m venv venv 接著就會看到原本 Django 資料夾中，多了一個 venv 資料夾 接著我們執行 ~/venv/Scripts/activate，以進入到虛擬環境中這邊塔克有遇到 終端機 powershell 無法執行的問題 (如圖中的紅色提示) 此時我們打開 powershell (記得使用管理員模式)輸入以下指令，並選擇 Y 即可正常執行 ~/venv/Scripts/activate 指令1Set-ExecutionPolicy RemoteSigned 成功後，前方會掛載自訂的虛擬環境名稱，如塔克所自訂的 venv 安裝 Django 並創建專案接著安裝 Django (記得輸入最新版本唷)1pip install django==2.1.3 完成後，輸入以下代碼創建專案1python ~\venv\Scripts\django-admin.py startproject yourprojectname 塔克這邊的例子是1python venv\Scripts\django-admin.py startproject Webapi 讓伺服器跑起來 !首先來看看 manage.py 這個檔案manage.py 是 Django 提供的命令列工具，我們稍後會一直跟它打交道詳細的說明可以參考 Django 官網說明 以及 Django Girls 學習指南輸入以下代碼，來跑跑看伺服器吧 ! (記得先將終端機目錄指定到剛剛建立的專案中唷!)1python manage.py runserver 成功後會顯示出 Starting development server at http://127.0.0.1:8000/開啟本地網頁 http://127.0.0.1:8000/ ，即可看到成功頁面 來個網頁應用程式吧 !開始來做個網頁吧首先先來創建個 Application回到 VS Code 輸入以下指令 (可以使用 Ctrl+C 讓終端機回到輸入指令的模式)1python manage.py startapp yourapplicationname 塔克這邊的例子是1python manage.py startapp ApiService 成功後，就可以在介面中看到創建好的 Application 接著打開 ~Webapi/settings.py調整一下裡面的屬性，讓 Django 管理剛創建的 Application1234567891011# Application definitionINSTALLED_APPS = [ &apos;django.contrib.admin&apos;, &apos;django.contrib.auth&apos;, &apos;django.contrib.contenttypes&apos;, &apos;django.contrib.sessions&apos;, &apos;django.contrib.messages&apos;, &apos;django.contrib.staticfiles&apos;, &apos;ApiService&apos;, #加上自己的應用程式，提供給 Django 管理] HTTP request &amp; HTTP response打開 ~/ApiService/views.py創建一個 hello_world 的 Http request呼叫後，會回應 Hello World!輸入以下代碼1234from django.http import HttpResponsedef hello_world(request): return HttpResponse(&quot;Hello World!&quot;) 接著打開 ~/Webapi/urls.pyimport 剛剛建立的 function1from ApiService.views import hello_world 並在 urlpatterns 下加入路徑1path(&apos;hello&apos;, hello_world), 代碼看起來會像這樣12345678from django.contrib import adminfrom django.urls import pathfrom ApiService import hello_worldurlpatterns = [ path(&apos;admin/&apos;, admin.site.urls), path(&apos;hello&apos;, hello_world),] 接著在啟動伺服器網址輸入 http://127.0.0.1:8000/hello就可以看到回覆的 Hello World! 額外小補充在 path(‘hello’, hello_world) 路徑設定中如果要對其路徑進行正則表達式如 r’^hello/$’, hello_world那麼就要先 import re_pathfrom django.urls import re_path在將 path 替換成 re_pathre_path(r’^hello/$’, hello_world) 建立網頁在我們專案中，先建立一個放置網頁的資料夾 templates並在此資料夾中，新增一個 hello_world.html 在 hello_world.html 中，輸入以下代碼1234567891011121314151617181920&lt;!-- hello_world.html --&gt;&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;title&gt;I come from template!!&lt;/title&gt; &lt;style&gt; body &#123; background-color: lightyellow; &#125; em &#123; color: LightSeaGreen; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Hello World!&lt;/h1&gt; &lt;em&gt;&#123;&#123; current_time &#125;&#125;&lt;/em&gt; &lt;/body&gt;&lt;/html&gt; 接著回到 ~/ApiService/views.py 中，修改一下代碼，內容如下12345678from django.shortcuts import renderfrom django.http import HttpResponsefrom datetime import datetimedef hello_world(request): return render(request, &apos;hello_world.html&apos;, &#123; &apos;current_time&apos;: str(datetime.now()), &#125;) 接著再回到 ~Webapi/settings.py，調整 TEMPLATES 設定修改一下 DIRS，內容如下1&apos;DIRS&apos;: [os.path.join(BASE_DIR, &apos;templates&apos;).replace(&apos;\\&apos;, &apos;/&apos;)], 重新啟動伺服器後，就可以看到網頁不再是單純的文字回覆囉 ! 參考VS Code 官網PowerShell 執行出錯Django 官網文件Django 網站框架 (Python)Django Girls 學習指南]]></content>
      <categories>
        <category>學習日誌</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python 隨手筆記 - 安裝Django]]></title>
    <url>%2F2018%2F11%2F26%2FPython-%E9%9A%A8%E6%89%8B%E7%AD%86%E8%A8%98-%E5%AE%89%E8%A3%9DDjango%2F</url>
    <content type="text"><![CDATA[安裝 Django在開始 Python 之旅前咱們來安裝 Django 作為 Python 的 web 框架(有裝 VS Code 的朋友，可以直接到 Python 隨手筆記 - 用 Django 作個網頁吧 ! 進行相同步驟) 建立 Django 資料夾在開始一連串的安裝程序之前我們先建立一個待會要安裝 Django 的資料夾塔克用的是 D:\WebProject\AppWeb\Django待會會以這個路徑為例子 建立虛擬環境我們會建立一個虛擬環境供 Django 使用打開命令提示字元 (cmd)，先將路徑指定到剛剛建立的 Django 資料夾接著輸入建立虛擬環境的指令 (python -m venv 後面打上要建立的虛擬環境名稱)1python -m venv yourvirtualenvironmentname 塔克這邊的例子是1python -m venv venv 成功後就會看到原本 Django 資料夾中，多了一個 venv 資料夾 接著我們執行 ~/venv/Scripts/activate，以進入到虛擬環境中 成功後，會如下圖顯示 (前方會掛載自訂的虛擬環境名稱，如塔克所自訂的 venv) 安裝 Django接下來要開始安裝 Django這邊塔克會先示範一個錯誤的情況避免大家遇到跟我一樣的問題 Or2首先輸入代碼，安裝 Django1pip install django==1.6.6 (圖中有提示要升級 pip，塔克這邊有跟著執行升級)完成後，咱們來創建專案 !輸入以下代碼1python ~\venv\Scripts\django-admin.py startproject yourprojectname 塔克這邊的例子是1python venv\Scripts\django-admin.py startproject Webapi 噹噹 !! 發生錯誤了 !!AttributeError: module ‘html.parser’ has no attribute ‘HTMLParseError’後來 Google 了一下，發現是版本過舊所致所以建議大家安裝前記得先到 Django 官網 中看一下最新版本是多少 (會不會太晚講了 QAQ”aaa)修改一下原本安裝得代碼，改成最新版本(這邊大家可以放心，Django 會先自動移除舊版本後，再安裝新版本)1pip install django==2.1.3 安裝好後，咱們重新創建專案 !重新輸入剛剛得代碼1python ~\venv\Scripts\django-admin.py startproject yourprojectname 成功後，就會在 Django 資料夾中看見專案 參考Django Girls 教學]]></content>
      <categories>
        <category>學習日誌</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python 隨手筆記 - 安裝Python]]></title>
    <url>%2F2018%2F11%2F26%2FPython-%E9%9A%A8%E6%89%8B%E7%AD%86%E8%A8%98-%E5%AE%89%E8%A3%9DPython%2F</url>
    <content type="text"><![CDATA[安裝 Python於 Python官網下載頁 下載 Python 套件 安裝套件，這邊要注意一下請將 “Add Python 3.7 to Path” 選項勾起，讓系統設定好環境變數(因為安裝軟體預設是沒勾起，塔克當初忽略它，結果一直安裝不好，搞好久 Or2) 安裝好後，請打開命令提示字元 (cmd)，輸入以下指令，測試有沒有成功安裝版本1python --version 跟世界說聲 Hello利用筆記本新創一個檔案 hello.py (記得另存新檔成 .py 檔案唷) 永遠都要先跟世界說 Hello 唷 😃1print(&quot;Hello World !&quot;); 打開命令提示字元 (cmd)，輸入以下指令，呼叫剛剛的檔案，跟世界說聲 Hello !1python hello.py 額外小補充安裝完 Python 後，記得要重開機，環境變數才會生效唷 !(當初塔克又卡在這邊很久 Or2)]]></content>
      <categories>
        <category>學習日誌</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[asp.net MVC 隨手筆記 - 使用 Open Iconic 加入圖示]]></title>
    <url>%2F2018%2F11%2F22%2Fasp-net-MVC-%E9%9A%A8%E6%89%8B%E7%AD%86%E8%A8%98-%E4%BD%BF%E7%94%A8-Open-Iconic-%E5%8A%A0%E5%85%A5%E5%9C%96%E7%A4%BA%2F</url>
    <content type="text"><![CDATA[使用 Open Iconic 添加網頁圖示於 OPENICONIC 官網 下載圖示壓縮檔 下載並解壓縮後，於 ~/open-iconic-master/font/css 中提取所需的 css 檔案並將其檔案放置 asp.net MVC ~/Content 資料夾中 (塔克這邊提取的是open-iconic-bootstrap.min.css)以及 ~/open-iconic-master/font/fonts 中提取所有檔案並將其檔案放置 asp.net MVC ~/fonts 資料夾中 於 OPENICONIC 官網 挑選要加入的圖示並點擊圖示以彈跳出代碼範例 因為塔克提取的是 bootstrap.min.css所以採用 Bootstrap Icon Font 代碼並於要顯示的 html 加入代碼 (這邊以 Home Page 為例)12345678@&#123; ViewBag.Title = &quot;Home Page&quot;;&#125;&lt;div&gt; &lt;span&gt; Hello World&lt;/span&gt; &lt;span class=&quot;oi oi-heart&quot;&gt;&lt;/span&gt;&lt;/div&gt; 即可顯示圖示 參考OPENICONIC 官網]]></content>
      <categories>
        <category>學習日誌</category>
      </categories>
      <tags>
        <tag>asp.net MVC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[遊戲藍圖-LifeOrDie (1)]]></title>
    <url>%2F2018%2F11%2F21%2F%E9%81%8A%E6%88%B2%E8%97%8D%E5%9C%96-LifeOrDie-1%2F</url>
    <content type="text"></content>
      <categories>
        <category>創作日誌</category>
      </categories>
      <tags>
        <tag>LifeOrDie</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[asp.net MVC 隨手筆記 - Styles.Render 加入 JS]]></title>
    <url>%2F2018%2F11%2F21%2Fasp.net%20MVC%20%E9%9A%A8%E6%89%8B%E7%AD%86%E8%A8%98%20-%20Styles.Render%20%E5%8A%A0%E5%85%A5%20JS%2F</url>
    <content type="text"><![CDATA[使用 Styles.Render include JS、CSSinclude JS、CSS在 AppWeb/BundleConfig RegisterBundles function 中輸入1bundles.Add(new ScriptBundle(&quot;~/bundles/typename&quot;).Include(&quot;~/Scripts/filename&quot;)); 並在指定的 cshtml 中，使用 @Scripts.Render 即可使用1@Scripts.Render(&quot;~/bundles/typename&quot;) 以新增的 vue.js 為例1bundles.Add(new ScriptBundle(&quot;~/bundles/vue&quot;).Include(&quot;~/Scripts/vue.js&quot;)); 並於 Views/_Layout.cshtml 中加入1@Scripts.Render(&quot;~/bundles/vue&quot;) 額外小補充可使用 {version}、** 等模糊查詢功能* include 指定資料夾下的所有 JS、CSS在 AppWeb/BundleConfig RegisterBundles function 中輸入1bundles.Add(newScriptBundle(&quot;~/bundles/typename&quot;).IncludeDirectory(&quot;~/Scripts/directoryname&quot;, &quot;*.js&quot;, true)); 舉個例子 &gt;&gt;&gt;新增 JS 檔案 輸入代碼1bundles.Add(newScriptBundle(&quot;~/bundles/AllJS&quot;).IncludeDirectory(&quot;~/Scripts/MainJS&quot;, &quot;*.js&quot;, true)); 並在指定的 cshtml 中，使用 @Scripts.Render 即可使用1@Scripts.Render(&quot;~/bundles/AllJS&quot;) 額外小補充.js 檔案無法從 Views 資料夾下作引用一定要放在 Scripts 資料夾下才可以]]></content>
      <categories>
        <category>學習日誌</category>
      </categories>
      <tags>
        <tag>asp.net MVC</tag>
      </tags>
  </entry>
</search>
